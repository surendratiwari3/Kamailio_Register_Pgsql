##DEVELOPED BY : SURENDRA TIWARI
##REGISTRAR SERVER 
##DATABASE ENGINE : PGSQL

#!KAMAILIO

#--------------------------------------------------------
# Section 1:  Global Definitions
#--------------------------------------------------------

# Database URL 
#!define DBURL "postgres://postgres:kamailio@localhost:5432/kamailio"

# Socket Address
#!substdef "!MY_UDP_PORT!7070!g"
#!substdef "!MY_IP_ADDR!172.31.26.0!g"
#!substdef "!MY_UDP_SOCKET_ADDR!udp:MY_IP_ADDR:MY_UDP_PORT!g"

# debug level, 1 is low and 4 is high (lots of output)
debug=4
fork=yes
children=4
memdbg=5
memlog=5

#Listening to Socket
listen = MY_UDP_SOCKET_ADDR

#--------------------------------------------------------
# Section 2:  Modules
#--------------------------------------------------------
loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "pv.so"

loadmodule "db_postgres.so"
modparam("db_postgres", "retries", 3)#retries to attept to reconnect if connection to Postgres server becomes broken.

loadmodule "usrloc.so"
modparam("usrloc", "db_mode", 2) 
modparam("usrloc", "db_url",DBURL)

loadmodule "registrar.so"
loadmodule "http_async_client.so"

loadmodule "auth.so" 
loadmodule "auth_db.so"
modparam("auth_db", "calculate_ha1", yes) 
modparam("auth_db", "password_column", "password") 
modparam("auth_db", "db_url",DBURL)
modparam("auth_db", "load_credentials", "") 

loadmodule "app_lua.so"

loadmodule "sanity.so"
loadmodule "maxfwd.so"
loadmodule "xlog.so"
loadmodule "textops.so"#is_method support
#--------------------------------------------------------
# Section 3: ROUTING
#--------------------------------------------------------
route {
	#Per Request Sanity Check
	route(SANITY_CHECK);
	#route(INDIALOG);
        route(AUTH);
	route(REGISTER);
	#route(INVITE);
}

# Sanity Check 
route[SANITY_CHECK]
{
	if(!sanity_check())
	{
		xlog("L_WARN","Sanity Check is Failed for $ci with $fU ");
		exit;
	}
	if (!mf_process_maxfwd_header("10")) 
	{
                xlog("L_WARN", "$ci|end|too much hops, sanity check failed");
                send_reply("483", "Too Many Hops");
                exit;
        }
	
}
#Authentication
route[AUTH]
{
	if(is_method("REGISTER") ||from_uri==myself)
	{	
		# authenticate requests
                if (!auth_check("$fd", "subscriber", "1")) {
                        auth_challenge("$fd", "1");
                        exit;
                }
                # user authenticated - remove auth header
                if(!is_method("REGISTER|PUBLISH"))
                        consume_credentials();
		
	}
}
#Register Logic
route[REGISTER]
{
	if(is_method("REGISTER"))
        {
		# saving into location database
		if(!save("location"))
		{	
			send_reply("401","Database Error While Saving Contact Into Database");
		}
		exit;
        }
}

