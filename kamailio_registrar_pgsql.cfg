##DEVELOPED BY : SURENDRA TIWARI
##REGISTRAR SERVER 
##DATABASE ENGINE : PGSQL

#!KAMAILIO

#--------------------------------------------------------
# Section 1:  Global Definitions
#--------------------------------------------------------

# Database URL 
#!define DBURL "postgres://postgres:kamailio@localhost:5432/kamailio"

# Socket Address
#!substdef "!MY_UDP_PORT!7070!g"
#!substdef "!MY_IP_ADDR!172.31.26.0!g"
#!substdef "!MY_UDP_SOCKET_ADDR!udp:MY_IP_ADDR:MY_UDP_PORT!g"

# debug level, 1 is low and 4 is high (lots of output)
debug=4
fork=yes
children=4
memdbg=5
memlog=5

#Listening to Socket
listen = MY_UDP_SOCKET_ADDR

#--------------------------------------------------------
# Section 2:  Modules
#--------------------------------------------------------
loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "siputils.so"

#module to provide connectivity with pgsql
loadmodule "db_postgres.so"
modparam("db_postgres", "retries", 3)#retries to attept to reconnect if connection to Postgres server becomes broken.

#module to interect with location database 
loadmodule "usrloc.so"
modparam("usrloc", "db_mode", 3) 
modparam("usrloc", "use_domain", 0)
modparam("usrloc", "db_url",DBURL)
modparam("tm|usrloc", "xavp_contact", "avalue")

#registrar module used for registration purpose
loadmodule "registrar.so"
modparam("registrar", "max_contacts", 10) #The parameter can be used to limit the number of contacts per AOR (Address of Record) in the user location database
modparam("registrar", "max_expires", 60) # max value for expires of registrations
modparam("registrar", "gruu_enabled", 0) #disbale gruu extension
modparam("registrar", "path_use_received", 1)
modparam("registrar", "use_path", 1)
modparam("registrar", "path_mode", 0)

#module to solve the nating problem
loadmodule "nathelper.so"
modparam("nathelper", "natping_interval", 10)
modparam("nathelper", "keepalive_timeout", 100)
modparam("nathelper|registrar", "received_avp", "$avp(s:received)")

#module to support http request
loadmodule "json.so"
loadmodule "http_async_client.so"
modparam("http_async_client", "workers", 2)

#module used for authentication the sip request
loadmodule "auth.so" 
loadmodule "auth_db.so"
modparam("auth_db", "calculate_ha1", yes) 
modparam("auth_db", "password_column", "password") 
modparam("auth_db", "db_url",DBURL)
modparam("auth_db", "load_credentials", "") 

#module used for providing connectivity with lua
#loadmodule "app_lua.so"
#modparam("app_lua", "load", "/usr/local/etc/kamailio/scripts/getroute.lua")

#module to check sanity for each sip message
loadmodule "sanity.so"
loadmodule "maxfwd.so"

#loging information
loadmodule "xlog.so"

#support methods
loadmodule "textops.so"#is_method support

#--------------------------------------------------------
# Section 3: ROUTING
#--------------------------------------------------------

route {
	#Per Request Sanity Check
	route(SANITY_CHECK);
	route(INDLG);
        # CANCEL processing
	if (is_method("CANCEL"))
	{
		if (t_check_trans())
			t_relay();
		exit;
	}
	t_check_trans();
	route(AUTH);
	route(REGISTER);
	force_rport();
	route(INVITE);
}

# Sanity Check 
route[SANITY_CHECK]
{
	if(!sanity_check())
	{
		xlog("L_WARN","Sanity Check is Failed for $ci with $fU ");
		exit;
	}
	if (!mf_process_maxfwd_header("10")) 
	{
                xlog("L_WARN", "$ci|end|too much hops, sanity check failed");
                send_reply("483", "Too Many Hops");
                exit;
        }
	
}

# DIALOG REQUEST CHECK
route[INDLG] {
	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			route(LOCATION);
		} 
		else 
		{
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# no loose-route, but stateful ACK;
					# must be an ACK after a 487
					# or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ... ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
}


#Authentication
route[AUTH]
{
	if (nat_uac_test("19")) 
	{
                if (is_method("REGISTER")) 
		{
                        fix_nated_register();
                }
		if(is_method("INVITE"))
		{
			fix_nated_sdp("3");
		}
	}
	if(is_method("REGISTER")||is_method("INVITE") ||from_uri==myself)
	{
		# authenticate requests
                if (!auth_check("$fd", "subscriber", "1")) {
                        auth_challenge("$fd", "1");
                        exit;
                }
                # user authenticated - remove auth header
                if(!is_method("REGISTER|PUBLISH"))
                        consume_credentials();
		
	}
}
#Register Logic
route[REGISTER]
{
	if(is_method("REGISTER"))
        {
		# saving into location database
		$xavp(avalue=>device_id)=$hdr(X-DeviceID);
		if(!save("location"))
		{	
			send_reply("401","Database Error While Saving Contact Into Database");
			exit;
		}
		exit;
        }
}
route[INVITE]
{
	if(is_method("INVITE"))
	{
		t_newtran();
		http_async_query("http://35.154.26.42:3000/","HTTPRTJSONREPLY");				
	}
}
route[HTTPRTJSONREPLY] 
{
	if($http_ok) 
	{
		xlogl("L_INFO", "route[HTTPRTJSONREPLY]: status $http_rs\n");
		xlogl("L_INFO", "route[HTTPRTJSONREPLY]: body $http_rb\n");
		json_get_field($http_rb,"RouteHeader", "$var(X-Route)");
		append_hf("X-Route: $var(X-Route)\r\n");
		route(LOCATION);
		exit;
	}
}
route[LOCATION]
{
	xlogl("L_INFO","before lookup location");
	lookup("location");
	xlogl("L_INFO","after lookup location");
	switch ($retcode) 
	{
    		case -1:
    		case -3:
			xlogl("L_INFO","location not found");
       			sl_send_reply("404", "Not Found");
        		exit;
    		case -2:
        		sl_send_reply("405", "Not Found");
			xlogl("L_INFO","location not found");
        		exit;
	};
	#pv_xavp_print();
	xlogl("L_INFO","LOC - [device-id] - $xavp(avalue[0]=>device_id)");
	xlogl("L_INFO","device-id for this call is $xavp(avalue=>device_id)");
	append_hf("X-Device-id: $xavp(avalue[0]=>device_id)\r\n");
	if(!t_relay()) 
	{
         	sl_reply_error();
        }
}
